PropertyPrices$number_of_frontages <- ifelse(is.na(PropertyPrices$number_of_frontages),
median(PropertyPrices$number_of_frontages, na.rm = TRUE),
PropertyPrices$number_of_frontages)
#comprobació que ja no queden valors nuls
colSums(is.na(PropertyPrices))
colSums(PropertyPrices=="")
mode_value <- calculate_mode(PropertyPrices$building_condition)
# mode_value <- calculate_mode(PropertyPrices$building_condition)
mode_value <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
# mode_value <- calculate_mode(PropertyPrices$building_condition)
install.packages("DescTools")
library(DescTools)
mode_value <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_value <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_value
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_surroundings <- Mode(PropertyPrices$surroundings_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
mode_conditions
mode_heat
mode_surroundings
mode_state
mode_kitchen_type
mode_city
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_surroundings <- Mode(PropertyPrices$surroundings_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
mode_conditions
mode_heat
mode_surroundings
PropertyPrices$mode_surroundings[is.na(PropertyPrices$mode_surroundings)] <- 0
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_surroundings <- Mode(PropertyPrices$surroundings_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
mode_conditions
mode_heat
mode_surroundings
mode_state
mode_kitchen_type
mode_city
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_surroundings <- Mode(PropertyPrices$surroundings_type, na.rm = TRUE)
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
mode_conditions
mode_heat
mode_state
mode_kitchen_type
mode_city
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
mode_conditions[1]
mode_heat[1]
mode_state[1]
mode_kitchen_type[1]
mode_city[1]
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
PropertyPrices$building_condition[PropertyPrices$building_condition==""] <- mode_conditions[1]
mode_heat[1]
mode_state[1]
mode_kitchen_type[1]
mode_city[1]
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
PropertyPrices$building_condition[PropertyPrices$building_condition==""] <- mode_conditions[1]
PropertyPrices$heating_type[PropertyPrices$heating_type==""] <- mode_heat[1]
PropertyPrices$state[PropertyPrices$state==""] <- mode_state[1]
PropertyPrices$kitchen_type[PropertyPrices$kitchen_type==""] <- mode_kitchen_type[1]
PropertyPrices$city[PropertyPrices$city==""] <- mode_city[1]
PropertyPrices$building_condition
PropertyPrices$heating_type
PropertyPrices$state
PropertyPrices$kitchen_type
PropertyPrices$city
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
PropertyPrices$building_condition[PropertyPrices$building_condition==""] <- mode_conditions[1]
PropertyPrices$heating_type[PropertyPrices$heating_type==""] <- mode_heat[1]
PropertyPrices$state[PropertyPrices$state==""] <- mode_state[1]
PropertyPrices$kitchen_type[PropertyPrices$kitchen_type==""] <- mode_kitchen_type[1]
PropertyPrices$city[PropertyPrices$city==""] <- mode_city[1]
colSums(PropertyPrices=="")
correlation_matrix <- cor(PropertyPrices)
numeric_variables <- PropertyPrices[, sapply(df, is.numeric)]
correlation_matrix <- cor(numeric_variables)
cor_with_price <- correlation_matrix["price", ]
numeric_variables <- PropertyPrices[, sapply(df, is.numeric)]
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price", ]
numeric_variables <- PropertyPrices[, sapply(df, is.numeric)]
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price"]
cor_with_price
numeric_variables <- PropertyPrices[, sapply(df, is.numeric)]
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price"]
numeric_variables <- PropertyPrices[, sapply(df, is.numeric)]
numeric_variables
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price"]
numeric_variables <- PropertyPrices[, sapply(PropertyPrices, is.numeric)]
numeric_variables
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price"]
numeric_variables <- PropertyPrices[, sapply(PropertyPrices, is.numeric)]
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price",]
sorted_correlations <- sort(abs(correlation_matrix["price",]), decreasing = TRUE)
top_10_correlations <- sorted_correlations[1:10]
sorted_correlations <- sort(abs(correlation_matrix["price",]), decreasing = TRUE)
top_10_correlations <- sorted_correlations[1:10]
top_10_correlations
sorted_correlations <- sort(abs(correlation_matrix["price",]), decreasing = TRUE)
top_10_correlations <- sorted_correlations[2:11]
top_10_correlations
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.factor)]
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
install.packages("psych")
library(psych)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.factor)]
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.factor)]
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
install.packages("Hmisc")
library(Hmisc)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.factor)]
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
# Obté la correlació específica amb la variable "price"
cor_with_price_categorical <- correlation_spearman$r[1, ]
# Imprimeix la correlació amb la variable "price" per a les variables categòriques
print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.factor)]
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
correlation_spearman
# Obté la correlació específica amb la variable "price"
cor_with_price_categorical <- correlation_spearman$r[1, ]
cor_with_price_categorical
# Imprimeix la correlació amb la variable "price" per a les variables categòriques
print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.factor)]
categorical_variables
# # Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
# correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
# correlation_spearman
# # Obté la correlació específica amb la variable "price"
# cor_with_price_categorical <- correlation_spearman$r[1, ]
# cor_with_price_categorical
# # Imprimeix la correlació amb la variable "price" per a les variables categòriques
# print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.string)]
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
# # Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
# correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
# correlation_spearman
# # Obté la correlació específica amb la variable "price"
# cor_with_price_categorical <- correlation_spearman$r[1, ]
# cor_with_price_categorical
# # Imprimeix la correlació amb la variable "price" per a les variables categòriques
# print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
categorical_variables <- as.factor(categorical_variables)
numeric_variables <- PropertyPrices[, sapply(PropertyPrices, is.numeric)]
numeric_variables
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price",]
numeric_variables <- PropertyPrices[, sapply(PropertyPrices, is.numeric)]
numeric_variables
PropertyPrices
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price",]
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
categorical_variables$building_condition <- as.factor(categorical_variables$building_condition)
categorical_variables$energy_class <- as.factor(categorical_variables$energy_class)
categorical_variables$heating_type <- as.factor(categorical_variables$heating_type)
categorical_variables$kitchen_type <- as.factor(categorical_variables$kitchen_type)
categorical_variables$city <- as.factor(categorical_variables$city)
categorical_variables$state <- as.factor(categorical_variables$state)
# # Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
# correlation_spearman$b <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
# correlation_spearman
# # Obté la correlació específica amb la variable "price"
# cor_with_price_categorical <- correlation_spearman$r[1, ]
# cor_with_price_categorical
# # Imprimeix la correlació amb la variable "price" per a les variables categòriques
# print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
categorical_variables$building_condition <- as.factor(categorical_variables$building_condition)
categorical_variables$energy_class <- as.factor(categorical_variables$energy_class)
categorical_variables$heating_type <- as.factor(categorical_variables$heating_type)
categorical_variables$kitchen_type <- as.factor(categorical_variables$kitchen_type)
categorical_variables$city <- as.factor(categorical_variables$city)
categorical_variables$state <- as.factor(categorical_variables$state)
categorical_variables
# # Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
# correlation_spearman$b <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
# correlation_spearman
# # Obté la correlació específica amb la variable "price"
# cor_with_price_categorical <- correlation_spearman$r[1, ]
# cor_with_price_categorical
# # Imprimeix la correlació amb la variable "price" per a les variables categòriques
# print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
categorical_variables$building_condition <- as.factor(categorical_variables$building_condition)
categorical_variables$energy_class <- as.factor(categorical_variables$energy_class)
categorical_variables$heating_type <- as.factor(categorical_variables$heating_type)
categorical_variables$kitchen_type <- as.factor(categorical_variables$kitchen_type)
categorical_variables$city <- as.factor(categorical_variables$city)
categorical_variables$state <- as.factor(categorical_variables$state)
summary(categorical_variables)
# # Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
# correlation_spearman$b <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
# correlation_spearman
# # Obté la correlació específica amb la variable "price"
# cor_with_price_categorical <- correlation_spearman$r[1, ]
# cor_with_price_categorical
# # Imprimeix la correlació amb la variable "price" per a les variables categòriques
# print(cor_with_price_categorical)
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables
categorical_variables$building_condition <- as.factor(categorical_variables$building_condition)
categorical_variables$energy_class <- as.factor(categorical_variables$energy_class)
categorical_variables$heating_type <- as.factor(categorical_variables$heating_type)
categorical_variables$kitchen_type <- as.factor(categorical_variables$kitchen_type)
categorical_variables$city <- as.factor(categorical_variables$city)
categorical_variables$state <- as.factor(categorical_variables$state)
summary(categorical_variables)
# Calcula la correlació de rangs de Spearman entre cada variable categòrica i "price"
correlation_spearman$b <- rcorr(as.matrix(categorical_variables), PropertyPrices$price, type = "spearman")
categorical_variables <- PropertyPrices[, sapply(PropertyPrices, is.character)]
categorical_variables$building_condition <- as.factor(categorical_variables$building_condition)
categorical_variables$energy_class <- as.factor(categorical_variables$energy_class)
categorical_variables$heating_type <- as.factor(categorical_variables$heating_type)
categorical_variables$kitchen_type <- as.factor(categorical_variables$kitchen_type)
categorical_variables$city <- as.factor(categorical_variables$city)
categorical_variables$state <- as.factor(categorical_variables$state)
summary(categorical_variables)
anova_result_condition <- aov(price ~ building_condition, data = categorical_variables)
PropertyPrices <- PropertyPrices[, sapply(PropertyPrices, is.character)]
PropertyPrices$building_condition <- as.factor(PropertyPrices$building_condition)
PropertyPrices$energy_class <- as.factor(PropertyPrices$energy_class)
PropertyPrices$heating_type <- as.factor(PropertyPrices$heating_type)
PropertyPrices$kitchen_type <- as.factor(PropertyPrices$kitchen_type)
PropertyPrices$city <- as.factor(PropertyPrices$city)
PropertyPrices$state <- as.factor(PropertyPrices$state)
summary(PropertyPrices)
knitr::opts_chunk$set(echo = TRUE)
PropertyPrices <- read.csv("belgian_property_prices.csv")
head(PropertyPrices)
structure = str(PropertyPrices)
summary = summary(PropertyPrices)
print(structure)
print(summary)
info_eliminar <- c("available_as_of", "lat", "lng", "postal", "street", "housenumber","website", "external_reference", "possible_priority_purchase_right",
"reference_number_of_the_epc_report", "proceedings_for_breach_of_planning_regulations", "tenement_building", "planning_permission_obtained","latest_land_use_designation")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
#seguidament arreglarem els valors nuls dels data set
print('NA')
colSums(is.na(PropertyPrices))
print('Blancs')
colSums(PropertyPrices=="")
#posem a 0 els valors nuls de les següents variables:
PropertyPrices$as_built_plan[is.na(PropertyPrices$as_built_plan)] <- 0
PropertyPrices$covered_parking_spaces[is.na(PropertyPrices$covered_parking_spaces)] <- 0
PropertyPrices$office[is.na(PropertyPrices$office)] <- 0
PropertyPrices$basement[is.na(PropertyPrices$basement)] <- 0
PropertyPrices$connection_to_sewer_network[is.na(PropertyPrices$connection_to_sewer_network)] <- 0
PropertyPrices$flood_zone_type[is.na(PropertyPrices$flood_zone_type)] <- 0
PropertyPrices$outdoor_parking_spaces[is.na(PropertyPrices$outdoor_parking_spaces)] <- 0
PropertyPrices$double_glazing[is.na(PropertyPrices$double_glazing)] <- 0
PropertyPrices$furnished[is.na(PropertyPrices$furnished)] <- 0
PropertyPrices$subdivision_permit[is.na(PropertyPrices$subdivision_permit)] <- 0
PropertyPrices$garden_surface[is.na(PropertyPrices$garden_surface)] <- 0
#posem a 1 les variables dining_room, gas_water__electricity, tv_cable i bedrooms, per la cosideració que casi totes les propietats conten amb aquetes caracteristiques
PropertyPrices$dining_room[is.na(PropertyPrices$dining_room)] <- 1
PropertyPrices$gas_water__electricity[is.na(PropertyPrices$gas_water__electricity)] <- 1
PropertyPrices$tv_cable[is.na(PropertyPrices$tv_cable)] <- 1
PropertyPrices$bedrooms[is.na(PropertyPrices$bedrooms)] <- 1
#Ara omplirem els NA que queden amb els valors de la mitja i mitjana depen de la variable
#MEAN
PropertyPrices$living_area <- ifelse(is.na(PropertyPrices$living_area),
mean(PropertyPrices$living_area, na.rm = TRUE),
PropertyPrices$living_area)
PropertyPrices$cadastral_income <- ifelse(is.na(PropertyPrices$cadastral_income),
mean(PropertyPrices$cadastral_income, na.rm = TRUE),
PropertyPrices$cadastral_income)
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface),
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$kitchen_surface <- ifelse(is.na(PropertyPrices$kitchen_surface),
mean(PropertyPrices$kitchen_surface, na.rm = TRUE),
PropertyPrices$kitchen_surface)
PropertyPrices$yearly_theoretical_total_energy_consumption <- ifelse(is.na(PropertyPrices$yearly_theoretical_total_energy_consumption),
mean(PropertyPrices$yearly_theoretical_total_energy_consumption, na.rm = TRUE),
PropertyPrices$yearly_theoretical_total_energy_consumption)
PropertyPrices$living_room_surface <- ifelse(is.na(PropertyPrices$living_room_surface),
mean(PropertyPrices$living_room_surface, na.rm = TRUE),
PropertyPrices$living_room_surface)
PropertyPrices$primary_energy_consumption <- ifelse(is.na(PropertyPrices$primary_energy_consumption),
mean(PropertyPrices$primary_energy_consumption, na.rm = TRUE),
PropertyPrices$primary_energy_consumption)
PropertyPrices$street_frontage_width <- ifelse(is.na(PropertyPrices$street_frontage_width),
mean(PropertyPrices$street_frontage_width, na.rm = TRUE),
PropertyPrices$street_frontage_width)
PropertyPrices$toilets <- ifelse(is.na(PropertyPrices$toilets),
mean(PropertyPrices$toilets, na.rm = TRUE),
PropertyPrices$toilets)
PropertyPrices$bathrooms <- ifelse(is.na(PropertyPrices$bathrooms),
mean(PropertyPrices$bathrooms, na.rm = TRUE),
PropertyPrices$bathrooms)
PropertyPrices$co2_emission <- ifelse(is.na(PropertyPrices$co2_emission),
mean(PropertyPrices$co2_emission, na.rm = TRUE),
PropertyPrices$co2_emission)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$garden_surface <- ifelse(is.na(PropertyPrices$garden_surface),
mean(PropertyPrices$garden_surface, na.rm = TRUE),
PropertyPrices$garden_surface)
PropertyPrices$surface_of_the_plot <- ifelse(is.na(PropertyPrices$surface_of_the_plot),
mean(PropertyPrices$surface_of_the_plot, na.rm = TRUE),
PropertyPrices$surface_of_the_plot)
#en aquestes tres variables només omplirem el valor si la variable habitacions és més gran o igual que l'habitació que estem mirant
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 1,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_2_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 2,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_3_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 3,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
#aquestes dos últimes variables he considerat que era millor omplirles amb la mitjana i na la mitja
PropertyPrices$construction_year <- ifelse(is.na(PropertyPrices$construction_year),
median(PropertyPrices$construction_year, na.rm = TRUE),
PropertyPrices$construction_year)
PropertyPrices$number_of_frontages <- ifelse(is.na(PropertyPrices$number_of_frontages),
median(PropertyPrices$number_of_frontages, na.rm = TRUE),
PropertyPrices$number_of_frontages)
#comprobació que ja no queden valors nuls
colSums(is.na(PropertyPrices))
colSums(PropertyPrices=="")
# mode_value <- calculate_mode(PropertyPrices$building_condition)
install.packages("DescTools")
library(DescTools)
mode_conditions <- Mode(PropertyPrices$building_condition, na.rm = TRUE)
mode_heat <- Mode(PropertyPrices$heating_type, na.rm = TRUE)
mode_state <- Mode(PropertyPrices$state, na.rm = TRUE)
mode_kitchen_type <- Mode(PropertyPrices$kitchen_type, na.rm = TRUE)
mode_city <- Mode(PropertyPrices$city, na.rm = TRUE)
info_eliminar <- c("surroundings_type")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
PropertyPrices$building_condition[PropertyPrices$building_condition==""] <- mode_conditions[1]
PropertyPrices$heating_type[PropertyPrices$heating_type==""] <- mode_heat[1]
PropertyPrices$state[PropertyPrices$state==""] <- mode_state[1]
PropertyPrices$kitchen_type[PropertyPrices$kitchen_type==""] <- mode_kitchen_type[1]
PropertyPrices$city[PropertyPrices$city==""] <- mode_city[1]
colSums(PropertyPrices=="")
#aqui podem veure els valors que pren la variable Price que va dels 30.000 fins als 2M aproximadament
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", col = "skyblue")
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 500000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPrices$price
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", col = "skyblue")
numeric_variables <- PropertyPrices[, sapply(PropertyPrices, is.numeric)]
correlation_matrix <- cor(numeric_variables)
correlation_matrix["price",]
install.packages("DescTools")
knitr::opts_chunk$set(echo = TRUE)
PropertyPrices$building_condition <- as.factor(PropertyPrices$building_condition)
PropertyPrices$energy_class <- as.factor(PropertyPrices$energy_class)
PropertyPrices$heating_type <- as.factor(PropertyPrices$heating_type)
PropertyPrices$kitchen_type <- as.factor(PropertyPrices$kitchen_type)
PropertyPrices$city <- as.factor(PropertyPrices$city)
PropertyPrices$state <- as.factor(PropertyPrices$state)
summary(PropertyPrices)
PropertyPrices$building_condition <- as.factor(PropertyPrices$building_condition)
PropertyPrices$energy_class <- as.factor(PropertyPrices$energy_class)
PropertyPrices$heating_type <- as.factor(PropertyPrices$heating_type)
PropertyPrices$kitchen_type <- as.factor(PropertyPrices$kitchen_type)
PropertyPrices$city <- as.factor(PropertyPrices$city)
PropertyPrices$state <- as.factor(PropertyPrices$state)
summary(PropertyPrices)
PropertyPrices
anova_result_condition <- aov(price ~ building_condition, data = PropertyPrices)
anova_result_kitchen <- aov(price ~ kitchen_type, data = PropertyPrices)
anova_result_energy <- aov(price ~ energy_class, data = PropertyPrices)
anova_result_heating <- aov(price ~ heating_type, data = PropertyPrices)
anova_result_city <- aov(price ~ city, data = PropertyPrices)
anova_result_state <- aov(price ~ state, data = PropertyPrices)
anova_result_condition <- aov(price ~ building_condition, data = PropertyPrices)
anova_result_kitchen <- aov(price ~ kitchen_type, data = PropertyPrices)
anova_result_energy <- aov(price ~ energy_class, data = PropertyPrices)
anova_result_heating <- aov(price ~ heating_type, data = PropertyPrices)
anova_result_city <- aov(price ~ city, data = PropertyPrices)
anova_result_state <- aov(price ~ state, data = PropertyPrices)
anova_result_condition
ggplot(df, aes(x = PropertyPrices$city, y = PropertyPrices$price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
ggplot(df, aes(x = PropertyPrices$city, y = PropertyPrices$price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
knitr::opts_chunk$set(echo = TRUE)
ggplot(df, aes(x = PropertyPrices$city, y = PropertyPrices$price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
ggplot(df, aes(x = PropertyPrices$city, y = PropertyPrices$price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
install.packages("ggplot2")
library(ggplot2)
ggplot(df, aes(x = PropertyPrices$city, y = PropertyPrices$price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
ggplot(PropertyPrices, aes(x = city, y = price)) +
geom_point() +
labs(title = "Scatter Plot entre una variable categòrica i una variable numèrica",
x = "Ciutat",
y = "Preu")
ggplot(PropertyPrices, aes(x = city, y = price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
ggplot(PropertyPrices, aes(x = building_condition, y = price)) +
geom_bar(stat = "summary", fun = "mean") +
labs(title = "Barplot amb mitjanes de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Mitjana de la Variable Numèrica")
ggplot(PropertyPrices, aes(x = building_condition, y = price)) +
geom_boxplot() +
labs(title = "Boxplot de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Variable Numèrica")
ggplot(PropertyPrices, aes(x = building_condition, y = price)) +
geom_violin() +
labs(title = "Violin plot de la relació entre una variable categòrica i una variable numèrica",
x = "Categoria",
y = "Variable Numèrica")
