opt$order
### Executem l'algoritme OPTICS deixant el paràmetre eps amb el seu valor per defecte i fixant el criteri de veïnatge en 10
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
opt
# Visualitza els clústers
plot(opt, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Obtenim la ordenació de les observacions o punts
opt$order
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Executem l'algoritme OPTICS
opt2 <- optics(numeric_variables_noPrice, eps = 1000, minPts = 10)
opt
# Visualitza els clústers
plot(opt, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Obtenim la ordenació de les observacions o punts
opt$order
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 100000, minPts = 10)
# Visualitza els clústers
plot(opt3, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 5)
# Visualitza els clústers
plot(opt3, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
hullplot(numeric_variables_noPrice$living_area, res)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
hullplot(numeric_variables_noPrice$living_area, opt1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
hullplot(c(numeric_variables_noPrice$living_area, numeric_variables$price), opt1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
dbscan_clusters1 <- dbscan(opt, eps = 10000, minPts = 10)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
dbscan_clusters1 <- dbscan(opt1, eps = 10000, minPts = 10)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
typeof(opt1)
dbscan_clusters1 <- dbscan(opt1, eps = 10000, minPts = 10)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(opt1, eps_cl = .065)
res
plot(res) ## negre indica soroll
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
plot(dbscan_clusters, data = numeric_variables_noPrice, main = "DBSCAN Clustering")
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(opt1, eps_cl = .065)
res
plot(res) ## negre indica soroll
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
knitr::opts_chunk$set(echo = TRUE)
if (!require('cluster')) install.packages('cluster')
library(cluster)
n <- 150 # número de mostres
p <- 2   # dimensions
sigma <- 1 # Variància de la distribució
mean1 <- 0 # centre del primer grup
mean2 <- 5 # centre del segon grup
n1 <- round(n/2) # número de mostres del primer grup
n2 <- round(n/2) # número de mostres del segon grup
x1 <- matrix(rnorm(n1*p,mean=mean1,sd=sigma),n1,p)
x2 <- matrix(rnorm(n2*p,mean=mean2,sd=sigma),n2,p)
x  <- rbind(x1,x2)
plot (x, xlab="Grup 1", ylab="Grup 2")
fit2       <- kmeans(x, 2)
y_cluster2 <- fit2$cluster
fit4       <- kmeans(x, 4)
y_cluster4 <- fit4$cluster
fit8       <- kmeans(x, 8)
y_cluster8 <- fit8$cluster
y_cluster2
clusplot(x, fit2$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
clusplot(x, fit4$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
clusplot(x, fit8$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
plot(x[y_cluster2==1,],col='blue', xlim=c(min(x[,1]), max(x[,1])), ylim=c(min(x[,2]), max(x[,2])), xlab = "Dimensió 1", ylab = "Dimensió 2")
points(x[y_cluster2==2,],col='red')
plot(x[y_cluster4==1,],col='blue', xlim=c(min(x[,1]), max(x[,1])), ylim=c(min(x[,2]), max(x[,2])), xlab = "Dimensió 1", ylab = "Dimensió 2")
points(x[y_cluster4==2,],col='red')
points(x[y_cluster4==3,],col='green')
points(x[y_cluster4==4,],col='black')
plot(x[y_cluster8==1,],col='blue', xlim=c(min(x[,1]), max(x[,1])), ylim=c(min(x[,2]), max(x[,2])), xlab = "Dimensió 1", ylab = "Dimensió 2")
points(x[y_cluster8==2,],col='red')
points(x[y_cluster8==3,],col='green')
points(x[y_cluster8==4,],col='black')
points(x[y_cluster8==5,],col='yellow')
points(x[y_cluster8==6,],col='purple')
points(x[y_cluster8==7,],col='cyan')
points(x[y_cluster8==8,],col='orange')
d  <- daisy(x)
sk2 <- silhouette(y_cluster2, d)
sk4 <- silhouette(y_cluster4, d)
sk8 <- silhouette(y_cluster8, d)
mean(sk2[,3])
mean(sk4[,3])
mean(sk8[,3])
if (!require('palmerpenguins')) install.packages('palmerpenguins')
library(palmerpenguins)
# palmerpenguins::penguins
summary(penguins)
x <- na.omit(penguins[,3:6])
d <- daisy(x)
resultados <- rep(0, 10)
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit           <- kmeans(x, i)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[i] <- mean(sk[,3])
}
plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Número de clusters",ylab="Silueta")
resultados <- rep(0, 10)
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit           <- kmeans(x, i)
resultados[i] <- fit$tot.withinss
}
plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Nombre de clústers",ylab="tot.tot.withinss")
if (!require('fpc')) install.packages('fpc'); library('fpc')
fit_ch  <- kmeansruns(x, krange = 1:10, criterion = "ch")
fit_asw <- kmeansruns(x, krange = 1:10, criterion = "asw")
fit_ch$bestk
fit_asw$bestk
plot(1:10,fit_ch$crit,type="o",col="blue",pch=0,xlab="Número de clústers",ylab="Criteri Calinski-Harabasz")
plot(1:10,fit_asw$crit,type="o",col="blue",pch=0,xlab="Número de clústers",ylab="Criteri silueta mitja")
penguins3clusters <- kmeans(x, 3)
# bill_lLength y bill_depth
plot(x[c(1,2)], col=penguins3clusters$cluster, main="Classificació k-means")
plot(x[c(1,2)], col=as.factor(penguins$species), main="Classificació real")
# flipper_length y body_mass
plot(x[c(3,4)], col=penguins3clusters$cluster, main="Classificació k-means")
plot(x[c(3,4)], col=as.factor(penguins$species), main="Classificació real")
# bill_length y flipper_length
plot(x[c(1,3)], col=penguins3clusters$cluster, main="Classificació k-means")
plot(x[c(1,3)], col=as.factor(penguins$species), main="Classificació real")
if (!require('dbscan')) install.packages('dbscan'); library('dbscan')
set.seed(2)
n <- 400
x <- cbind(
x = runif(4, 0, 1) + rnorm(n, sd=0.1),
y = runif(4, 0, 1) + rnorm(n, sd=0.1)
)
plot(x, col=rep(1:4, time = 100))
### Executem l'algoritme OPTICS deixant el paràmetre eps amb el seu valor per defecte i fixant el criteri de veïnatge en 10
res <- optics(x, minPts = 10)
res
### Obtenim la ordenació de les observacions o punts
res$order
### Gràfic d'accessibilitat
plot(res)
### Dibuixem les traces que relacionen punts
plot(x, col = "grey")
polygon(x[res$order,])
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(res, eps_cl = .065)
res
plot(res) ## negre indica soroll
hullplot(x, res)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(opt1, eps_cl = 1000)
res
plot(res) ## negre indica soroll
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(opt1, eps_cl = 10000000)
res
plot(res) ## negre indica soroll
# Visualitza els clústers
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(opt1, eps_cl = 10000000)
res
plot(res) ## negre indica soroll
# Visualitza els clústers
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res <- extractDBSCAN(opt1, eps_cl = 100000)
res
plot(res) ## negre indica soroll
# Visualitza els clústers
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 5)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res3 <- extractDBSCAN(opt3, eps_cl = 100000)
plot(res3) ## negre indica soroll
# Visualitza els clústers
### Executem l'algoritme OPTICS
opt2 <- optics(numeric_variables_noPrice, eps = 1000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res2 <- extractDBSCAN(opt2, eps_cl = 100000)
plot(res2) ## negre indica soroll
# Visualitza els clústers
### Executem l'algoritme OPTICS
opt2 <- optics(numeric_variables_noPrice, eps = 1000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res2 <- extractDBSCAN(opt2, eps_cl = 10000000)
plot(res2) ## negre indica soroll
# Visualitza els clústers
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables, res1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables$price, res1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
hullplot(c(numeric_variables$price, numeric_variables$living_area), res1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables, res1)
### Executem l'algoritme OPTICS
opt2 <- optics(numeric_variables_noPrice, eps = 1000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res2 <- extractDBSCAN(opt2, eps_cl = 10000000)
plot(res2) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables, res2)
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 5)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res3 <- extractDBSCAN(opt3, eps_cl = 100000)
plot(res3) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables, res3)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
hullplot(c(numeric_variables$living_area, numeric_variables$kitchen_surface, numeric_variables%price_intervals), res1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
selected_variables <- numeric_variables_noPrice[, c("kitchen_surface", "variable2", "variable3")]
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(c(numeric_variables$living_area, numeric_variables$kitchen_surface, numeric_variables$price_intervals), res1)
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1) ## negre indica soroll
# Visualitza els clústers
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res1)
### Executem l'algoritme OPTICS
opt2 <- optics(numeric_variables_noPrice, eps = 1000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res2 <- extractDBSCAN(opt2, eps_cl = 10000000)
plot(res2) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables, res2)
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res2)
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 5)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res3 <- extractDBSCAN(opt3, eps_cl = 100000)
plot(res3)
hullplot(numeric_variables, res3)
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res1)
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 5)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res3 <- extractDBSCAN(opt3, eps_cl = 100000)
plot(res3)
hullplot(numeric_variables, res3)
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res3)
knitr::opts_chunk$set(eval=T, echo=T)
data<-read.csv("./titanic.csv",header=T,sep=",")
knitr::opts_chunk$set(eval=T, echo=T)
data<-read.csv("./titanic.csv",header=T,sep=",")
set.seed(666)
y <- data[,4]
set.seed(222)
y <- numeric_variables[,"price_intervals"]
X <- numeric_variables[, !names(numeric_variables) %in% c("price_intervals","price")]
split_prop <- 3
indexes = sample(1:nrow(data), size=floor(((split_prop-1)/split_prop)*nrow(data)))
split_prop <- 3
indexes = sample(1:nrow(numeric_variables), size=floor(((split_prop-1)/split_prop)*nrow(numeric_variables)))
trainX<-X[indexes,]
trainy<-y[indexes]
testX<-X[-indexes,]
testy<-y[-indexes]
split_prop <- 3
indexes = sample(1:nrow(numeric_variables), size=floor(((split_prop-1)/split_prop)*nrow(numeric_variables)))
trainX<-X[indexes,]
trainy<-y[indexes]
testX<-X[-indexes,]
testy<-y[-indexes]
summary(trainX);
summary(trainy)
summary(testX)
summary(testy)
trainy = as.factor(trainy)
model <- C50::C5.0(trainX, trainy,rules=TRUE )
if (!require('cluster')) install.packages('cluster')
library(cluster)
if (!require('stats')) install.packages('stats')
library(stats)
if (!require("flexclust")) install.packages("flexclust")
library(flexclust)
if (!require('dbscan')) install.packages('dbscan'); library('dbscan')
if(!require(ggpubr)){
install.packages('ggpubr', repos='http://cran.us.r-project.org')
library(ggpubr)
}
if(!require(grid)){
install.packages('grid', repos='http://cran.us.r-project.org')
library(grid)
}
if(!require(gridExtra)){
install.packages('gridExtra', repos='http://cran.us.r-project.org')
library(gridExtra)
}
if(!require(C50)){
install.packages('C50', repos='http://cran.us.r-project.org')
library(C50)
}
trainy = as.factor(trainy)
model <- C50::C5.0(trainX, trainy,rules=TRUE )
summary(model)
modelo2 <- C50::C5.0(trainX, trainy, trials = 10)
plot(modelo2)
plot(model,gp = gpar(fontsize = 9.5))
plot(model,gp = gpar(fontsize = 9.5))
knitr::opts_chunk$set(echo = TRUE)
if (!require('cluster')) install.packages('cluster')
library(cluster)
if (!require('stats')) install.packages('stats')
library(stats)
if (!require("flexclust")) install.packages("flexclust")
library(flexclust)
if (!require('dbscan')) install.packages('dbscan'); library('dbscan')
if(!require(ggpubr)){
install.packages('ggpubr', repos='http://cran.us.r-project.org')
library(ggpubr)
}
if(!require(grid)){
install.packages('grid', repos='http://cran.us.r-project.org')
library(grid)
}
if(!require(gridExtra)){
install.packages('gridExtra', repos='http://cran.us.r-project.org')
library(gridExtra)
}
if(!require(C50)){
install.packages('C50', repos='http://cran.us.r-project.org')
library(C50)
}
numeric_variables <- readRDS("numeric_variables.rds")
PropertyPrices <- readRDS("PropertyPrices.rds")
PropertyPrices
numeric_variables
numeric_variables$price_intervals <- as.numeric(as.character(PropertyPrices$price_intervals))
numeric_variables <- na.omit(numeric_variables)
numeric_variables <- as.data.frame(numeric_variables)
numeric_variables_noPrice <- numeric_variables[, -which(names(numeric_variables) == "price")]
fit2 <- kmeans(numeric_variables_noPrice, 2)
fit4 <- kmeans(numeric_variables_noPrice, 4)
fit8 <- kmeans(numeric_variables_noPrice, 8)
fit12 <- kmeans(numeric_variables_noPrice, 12)
cluster2 <- fit2$cluster
cluster4 <- fit4$cluster
cluster8 <- fit8$cluster
cluster12 <- fit12$cluster
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster2, pch = 16)
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster4, pch = 16)
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster8, pch = 16)
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster12, pch = 16)
wcss2 <- fit2$tot.withinss
wcss2
wcss4 <- fit4$tot.withinss
wcss4
wcss8 <- fit8$tot.withinss
wcss8
wcss12 <- fit12$tot.withinss
wcss12
kmed2 <- kmeans(numeric_variables_noPrice, 2, algorithm = "Lloyd")
kmed4 <- kmeans(numeric_variables_noPrice, 4, algorithm = "Lloyd")
kmed8 <- kmeans(numeric_variables_noPrice, 8, algorithm = "Lloyd")
kmed12 <- kmeans(numeric_variables_noPrice, 12, algorithm = "Lloyd")
cluster_med2 <- kmed2$cluster
cluster_med4 <- kmed4$cluster
cluster_med8 <- kmed8$cluster
cluster_med12 <- kmed12$cluster
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster_med2, pch = 16)
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster_med4, pch = 16)
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster_med8, pch = 16)
plot(numeric_variables$living_area, numeric_variables$price_intervals, col = cluster_med12, pch = 16)
wcss2 <- kmed2$tot.withinss
wcss2
wcss4 <- kmed4$tot.withinss
wcss4
wcss8 <- kmed8$tot.withinss
wcss8
wcss12 <- kmed12$tot.withinss
wcss12
### Executem l'algoritme OPTICS
opt1 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 10)
plot(opt1, data = numeric_variables_noPrice, main = "OPTICS Clustering")
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res1 <- extractDBSCAN(opt1, eps_cl = 100000)
plot(res1)
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res1)
### Executem l'algoritme OPTICS
opt2 <- optics(numeric_variables_noPrice, eps = 1000, minPts = 10)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res2 <- extractDBSCAN(opt2, eps_cl = 10000000)
plot(res2) ## negre indica soroll
# Visualitza els clústers
hullplot(numeric_variables, res2)
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res2)
### Executem l'algoritme OPTICS
opt3 <- optics(numeric_variables_noPrice, eps = 10000, minPts = 5)
### Extracció d'un clústering DBSCAN tallant l'accessibilitat en el valor eps_cl
res3 <- extractDBSCAN(opt3, eps_cl = 100000)
plot(res3)
hullplot(numeric_variables, res3)
selected_variables <- numeric_variables[, c("kitchen_surface", "living_area", "price_intervals")]
hullplot(selected_variables, res3)
set.seed(222)
y <- numeric_variables[,"price_intervals"]
X <- numeric_variables[, !names(numeric_variables) %in% c("price_intervals","price")]
split_prop <- 3
indexes = sample(1:nrow(numeric_variables), size=floor(((split_prop-1)/split_prop)*nrow(numeric_variables)))
trainX<-X[indexes,]
trainy<-y[indexes]
testX<-X[-indexes,]
testy<-y[-indexes]
summary(trainX);
summary(trainy)
summary(testX)
summary(testy)
trainy = as.factor(trainy)
model <- C50::C5.0(trainX, trainy,rules=TRUE )
summary(model)
plot(model,gp = gpar(fontsize = 9.5))
plot(model,gp = gpar(fontsize = 9.5))
