median(PropertyPrices$construction_year, na.rm = TRUE),
PropertyPrices$construction_year)
PropertyPrices$number_of_frontages <- ifelse(is.na(PropertyPrices$number_of_frontages),
median(PropertyPrices$number_of_frontages, na.rm = TRUE),
PropertyPrices$number_of_frontages)
colSums(is.na(PropertyPrices))
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", ylab = "Frecuencia", col = "skyblue")
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", col = "skyblue")
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, labels = intervals, include.lowest = TRUE)
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, include.lowest = TRUE)
PropertyPrices$price
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, include.lowest = TRUE)
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, include.lowest = TRUE)
PropertyPrices <- read.csv("belgian_property_prices.csv")
head(PropertyPrices)
structure = str(PropertyPrices)
summary = summary(PropertyPrices)
print(structure)
print(summary)
#primer de tot borrarem algunes variables que sembla que no influeixen a la predicció
info_eliminar <- c("available_as_of", "lat", "lng", "postal", "street", "housenumber","website", "external_reference", "possible_priority_purchase_right",
"reference_number_of_the_epc_report", "proceedings_for_breach_of_planning_regulations", "tenement_building", "planning_permission_obtained")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
#seguidament arreglarem els valors nuls dels data set
print('NA')
colSums(is.na(PropertyPrices))
print('Blancs')
colSums(PropertyPrices=="")
#posem a 0 els valors nuls de les següents variables:
PropertyPrices$as_built_plan[is.na(PropertyPrices$as_built_plan)] <- 0
PropertyPrices$covered_parking_spaces[is.na(PropertyPrices$covered_parking_spaces)] <- 0
PropertyPrices$office[is.na(PropertyPrices$office)] <- 0
PropertyPrices$basement[is.na(PropertyPrices$basement)] <- 0
PropertyPrices$connection_to_sewer_network[is.na(PropertyPrices$connection_to_sewer_network)] <- 0
PropertyPrices$flood_zone_type[is.na(PropertyPrices$flood_zone_type)] <- 0
PropertyPrices$outdoor_parking_spaces[is.na(PropertyPrices$outdoor_parking_spaces)] <- 0
PropertyPrices$double_glazing[is.na(PropertyPrices$double_glazing)] <- 0
PropertyPrices$furnished[is.na(PropertyPrices$furnished)] <- 0
PropertyPrices$subdivision_permit[is.na(PropertyPrices$subdivision_permit)] <- 0
PropertyPrices$garden_surface[is.na(PropertyPrices$garden_surface)] <- 0
#posem a 1 les variables dining_room, gas_water__electricity, tv_cable i bedrooms, per la cosideració que casi totes les propietats conten amb aquetes caracteristiques
PropertyPrices$dining_room[is.na(PropertyPrices$dining_room)] <- 1
PropertyPrices$gas_water__electricity[is.na(PropertyPrices$gas_water__electricity)] <- 1
PropertyPrices$tv_cable[is.na(PropertyPrices$tv_cable)] <- 1
PropertyPrices$bedrooms[is.na(PropertyPrices$bedrooms)] <- 1
#Ara omplirem els NA que queden amb els valors de la mitja i mitjana depen de la variable
#MEAN
PropertyPrices$living_area <- ifelse(is.na(PropertyPrices$living_area),
mean(PropertyPrices$living_area, na.rm = TRUE),
PropertyPrices$living_area)
PropertyPrices$cadastral_income <- ifelse(is.na(PropertyPrices$cadastral_income),
mean(PropertyPrices$cadastral_income, na.rm = TRUE),
PropertyPrices$cadastral_income)
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface),
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$kitchen_surface <- ifelse(is.na(PropertyPrices$kitchen_surface),
mean(PropertyPrices$kitchen_surface, na.rm = TRUE),
PropertyPrices$kitchen_surface)
PropertyPrices$yearly_theoretical_total_energy_consumption <- ifelse(is.na(PropertyPrices$yearly_theoretical_total_energy_consumption),
mean(PropertyPrices$yearly_theoretical_total_energy_consumption, na.rm = TRUE),
PropertyPrices$yearly_theoretical_total_energy_consumption)
PropertyPrices$living_room_surface <- ifelse(is.na(PropertyPrices$living_room_surface),
mean(PropertyPrices$living_room_surface, na.rm = TRUE),
PropertyPrices$living_room_surface)
PropertyPrices$primary_energy_consumption <- ifelse(is.na(PropertyPrices$primary_energy_consumption),
mean(PropertyPrices$primary_energy_consumption, na.rm = TRUE),
PropertyPrices$primary_energy_consumption)
PropertyPrices$street_frontage_width <- ifelse(is.na(PropertyPrices$street_frontage_width),
mean(PropertyPrices$street_frontage_width, na.rm = TRUE),
PropertyPrices$street_frontage_width)
PropertyPrices$toilets <- ifelse(is.na(PropertyPrices$toilets),
mean(PropertyPrices$toilets, na.rm = TRUE),
PropertyPrices$toilets)
PropertyPrices$bathrooms <- ifelse(is.na(PropertyPrices$bathrooms),
mean(PropertyPrices$bathrooms, na.rm = TRUE),
PropertyPrices$bathrooms)
PropertyPrices$co2_emission <- ifelse(is.na(PropertyPrices$co2_emission),
mean(PropertyPrices$co2_emission, na.rm = TRUE),
PropertyPrices$co2_emission)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$garden_surface <- ifelse(is.na(PropertyPrices$garden_surface),
mean(PropertyPrices$garden_surface, na.rm = TRUE),
PropertyPrices$garden_surface)
PropertyPrices$surface_of_the_plot <- ifelse(is.na(PropertyPrices$surface_of_the_plot),
mean(PropertyPrices$surface_of_the_plot, na.rm = TRUE),
PropertyPrices$surface_of_the_plot)
#en aquestes tres variables només omplirem el valor si la variable habitacions és més gran o igual que l'habitació que estem mirant
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 1,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_2_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 2,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_3_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 3,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
#aquestes dos últimes variables he considerat que era millor omplirles amb la mitjana i na la mitja
PropertyPrices$construction_year <- ifelse(is.na(PropertyPrices$construction_year),
median(PropertyPrices$construction_year, na.rm = TRUE),
PropertyPrices$construction_year)
PropertyPrices$number_of_frontages <- ifelse(is.na(PropertyPrices$number_of_frontages),
median(PropertyPrices$number_of_frontages, na.rm = TRUE),
PropertyPrices$number_of_frontages)
#comprobació que ja no queden valors nuls
colSums(is.na(PropertyPrices))
#aqui podem veure els valors que pren la variable Price que va dels 30.000 fins als 2M aproximadament
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", col = "skyblue")
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, include.lowest = TRUE)
PropertyPrices$price <- as.integer(as.character(PropertyPrices$price))
PropertyPrices$price
PropertyPrices <- read.csv("belgian_property_prices.csv")
head(PropertyPrices)
structure = str(PropertyPrices)
summary = summary(PropertyPrices)
print(structure)
print(summary)
#primer de tot borrarem algunes variables que sembla que no influeixen a la predicció
info_eliminar <- c("available_as_of", "lat", "lng", "postal", "street", "housenumber","website", "external_reference", "possible_priority_purchase_right",
"reference_number_of_the_epc_report", "proceedings_for_breach_of_planning_regulations", "tenement_building", "planning_permission_obtained")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
#seguidament arreglarem els valors nuls dels data set
print('NA')
colSums(is.na(PropertyPrices))
print('Blancs')
colSums(PropertyPrices=="")
#posem a 0 els valors nuls de les següents variables:
PropertyPrices$as_built_plan[is.na(PropertyPrices$as_built_plan)] <- 0
PropertyPrices$covered_parking_spaces[is.na(PropertyPrices$covered_parking_spaces)] <- 0
PropertyPrices$office[is.na(PropertyPrices$office)] <- 0
PropertyPrices$basement[is.na(PropertyPrices$basement)] <- 0
PropertyPrices$connection_to_sewer_network[is.na(PropertyPrices$connection_to_sewer_network)] <- 0
PropertyPrices$flood_zone_type[is.na(PropertyPrices$flood_zone_type)] <- 0
PropertyPrices$outdoor_parking_spaces[is.na(PropertyPrices$outdoor_parking_spaces)] <- 0
PropertyPrices$double_glazing[is.na(PropertyPrices$double_glazing)] <- 0
PropertyPrices$furnished[is.na(PropertyPrices$furnished)] <- 0
PropertyPrices$subdivision_permit[is.na(PropertyPrices$subdivision_permit)] <- 0
PropertyPrices$garden_surface[is.na(PropertyPrices$garden_surface)] <- 0
#posem a 1 les variables dining_room, gas_water__electricity, tv_cable i bedrooms, per la cosideració que casi totes les propietats conten amb aquetes caracteristiques
PropertyPrices$dining_room[is.na(PropertyPrices$dining_room)] <- 1
PropertyPrices$gas_water__electricity[is.na(PropertyPrices$gas_water__electricity)] <- 1
PropertyPrices$tv_cable[is.na(PropertyPrices$tv_cable)] <- 1
PropertyPrices$bedrooms[is.na(PropertyPrices$bedrooms)] <- 1
#Ara omplirem els NA que queden amb els valors de la mitja i mitjana depen de la variable
#MEAN
PropertyPrices$living_area <- ifelse(is.na(PropertyPrices$living_area),
mean(PropertyPrices$living_area, na.rm = TRUE),
PropertyPrices$living_area)
PropertyPrices$cadastral_income <- ifelse(is.na(PropertyPrices$cadastral_income),
mean(PropertyPrices$cadastral_income, na.rm = TRUE),
PropertyPrices$cadastral_income)
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface),
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$kitchen_surface <- ifelse(is.na(PropertyPrices$kitchen_surface),
mean(PropertyPrices$kitchen_surface, na.rm = TRUE),
PropertyPrices$kitchen_surface)
PropertyPrices$yearly_theoretical_total_energy_consumption <- ifelse(is.na(PropertyPrices$yearly_theoretical_total_energy_consumption),
mean(PropertyPrices$yearly_theoretical_total_energy_consumption, na.rm = TRUE),
PropertyPrices$yearly_theoretical_total_energy_consumption)
PropertyPrices$living_room_surface <- ifelse(is.na(PropertyPrices$living_room_surface),
mean(PropertyPrices$living_room_surface, na.rm = TRUE),
PropertyPrices$living_room_surface)
PropertyPrices$primary_energy_consumption <- ifelse(is.na(PropertyPrices$primary_energy_consumption),
mean(PropertyPrices$primary_energy_consumption, na.rm = TRUE),
PropertyPrices$primary_energy_consumption)
PropertyPrices$street_frontage_width <- ifelse(is.na(PropertyPrices$street_frontage_width),
mean(PropertyPrices$street_frontage_width, na.rm = TRUE),
PropertyPrices$street_frontage_width)
PropertyPrices$toilets <- ifelse(is.na(PropertyPrices$toilets),
mean(PropertyPrices$toilets, na.rm = TRUE),
PropertyPrices$toilets)
PropertyPrices$bathrooms <- ifelse(is.na(PropertyPrices$bathrooms),
mean(PropertyPrices$bathrooms, na.rm = TRUE),
PropertyPrices$bathrooms)
PropertyPrices$co2_emission <- ifelse(is.na(PropertyPrices$co2_emission),
mean(PropertyPrices$co2_emission, na.rm = TRUE),
PropertyPrices$co2_emission)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$garden_surface <- ifelse(is.na(PropertyPrices$garden_surface),
mean(PropertyPrices$garden_surface, na.rm = TRUE),
PropertyPrices$garden_surface)
PropertyPrices$surface_of_the_plot <- ifelse(is.na(PropertyPrices$surface_of_the_plot),
mean(PropertyPrices$surface_of_the_plot, na.rm = TRUE),
PropertyPrices$surface_of_the_plot)
#en aquestes tres variables només omplirem el valor si la variable habitacions és més gran o igual que l'habitació que estem mirant
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 1,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_2_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 2,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_3_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 3,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
#aquestes dos últimes variables he considerat que era millor omplirles amb la mitjana i na la mitja
PropertyPrices$construction_year <- ifelse(is.na(PropertyPrices$construction_year),
median(PropertyPrices$construction_year, na.rm = TRUE),
PropertyPrices$construction_year)
PropertyPrices$number_of_frontages <- ifelse(is.na(PropertyPrices$number_of_frontages),
median(PropertyPrices$number_of_frontages, na.rm = TRUE),
PropertyPrices$number_of_frontages)
#comprobació que ja no queden valors nuls
colSums(is.na(PropertyPrices))
#aqui podem veure els valors que pren la variable Price que va dels 30.000 fins als 2M aproximadament
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", col = "skyblue")
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, include.lowest = TRUE)
PropertyPricesAux$price <- as.integer(as.character(PropertyPricesAux$price))
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, include.lowest = TRUE)
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 10 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
# PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, include.lowest = TRUE)
PropertyPrices$price <- as.integer(as.character(PropertyPrices$price))
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, include.lowest = TRUE)
PropertyPricesAux$price <- as.integer(as.character(PropertyPricesAux$price))
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals, include.lowest = TRUE)
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
# PropertyPricesAux$price <- as.integer(as.character(PropertyPricesAux$price))
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPrices$subdivision_permit[is.na(PropertyPrices$subdivision_permit)] <- 2000000
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux$price[is.na(PropertyPricesAux$price)] <- 2000000
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1500000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux$price[is.na(PropertyPricesAux$price)] <- 2000000
PropertyPricesAux$price
PropertyPrices$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, inf)
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 5000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux$price[=<NA>] <- 2000000
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 5000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 500000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPricesAux$price <- cut(PropertyPricesAux$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 500000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux$price
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 500000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 500000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
#PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPrices$price
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
modelo_kmeans <- kmeans(PropertyPrices$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices_without_na <- na.omit(PropertyPrices$price)
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices), ]
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices), ]
modelo_kmeans <- kmeans(PropertyPrices$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices$price), ]
modelo_kmeans <- kmeans(PropertyPrices$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices$price), ]
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
PropertyPrices <- read.csv("belgian_property_prices.csv")
head(PropertyPrices)
structure = str(PropertyPrices)
summary = summary(PropertyPrices)
print(structure)
print(summary)
#primer de tot borrarem algunes variables que sembla que no influeixen a la predicció
info_eliminar <- c("available_as_of", "lat", "lng", "postal", "street", "housenumber","website", "external_reference", "possible_priority_purchase_right",
"reference_number_of_the_epc_report", "proceedings_for_breach_of_planning_regulations", "tenement_building", "planning_permission_obtained")
PropertyPrices <- PropertyPrices[, !(names(PropertyPrices) %in% info_eliminar)]
#seguidament arreglarem els valors nuls dels data set
print('NA')
colSums(is.na(PropertyPrices))
print('Blancs')
colSums(PropertyPrices=="")
#posem a 0 els valors nuls de les següents variables:
PropertyPrices$as_built_plan[is.na(PropertyPrices$as_built_plan)] <- 0
PropertyPrices$covered_parking_spaces[is.na(PropertyPrices$covered_parking_spaces)] <- 0
PropertyPrices$office[is.na(PropertyPrices$office)] <- 0
PropertyPrices$basement[is.na(PropertyPrices$basement)] <- 0
PropertyPrices$connection_to_sewer_network[is.na(PropertyPrices$connection_to_sewer_network)] <- 0
PropertyPrices$flood_zone_type[is.na(PropertyPrices$flood_zone_type)] <- 0
PropertyPrices$outdoor_parking_spaces[is.na(PropertyPrices$outdoor_parking_spaces)] <- 0
PropertyPrices$double_glazing[is.na(PropertyPrices$double_glazing)] <- 0
PropertyPrices$furnished[is.na(PropertyPrices$furnished)] <- 0
PropertyPrices$subdivision_permit[is.na(PropertyPrices$subdivision_permit)] <- 0
PropertyPrices$garden_surface[is.na(PropertyPrices$garden_surface)] <- 0
#posem a 1 les variables dining_room, gas_water__electricity, tv_cable i bedrooms, per la cosideració que casi totes les propietats conten amb aquetes caracteristiques
PropertyPrices$dining_room[is.na(PropertyPrices$dining_room)] <- 1
PropertyPrices$gas_water__electricity[is.na(PropertyPrices$gas_water__electricity)] <- 1
PropertyPrices$tv_cable[is.na(PropertyPrices$tv_cable)] <- 1
PropertyPrices$bedrooms[is.na(PropertyPrices$bedrooms)] <- 1
#Ara omplirem els NA que queden amb els valors de la mitja i mitjana depen de la variable
#MEAN
PropertyPrices$living_area <- ifelse(is.na(PropertyPrices$living_area),
mean(PropertyPrices$living_area, na.rm = TRUE),
PropertyPrices$living_area)
PropertyPrices$cadastral_income <- ifelse(is.na(PropertyPrices$cadastral_income),
mean(PropertyPrices$cadastral_income, na.rm = TRUE),
PropertyPrices$cadastral_income)
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface),
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$kitchen_surface <- ifelse(is.na(PropertyPrices$kitchen_surface),
mean(PropertyPrices$kitchen_surface, na.rm = TRUE),
PropertyPrices$kitchen_surface)
PropertyPrices$yearly_theoretical_total_energy_consumption <- ifelse(is.na(PropertyPrices$yearly_theoretical_total_energy_consumption),
mean(PropertyPrices$yearly_theoretical_total_energy_consumption, na.rm = TRUE),
PropertyPrices$yearly_theoretical_total_energy_consumption)
PropertyPrices$living_room_surface <- ifelse(is.na(PropertyPrices$living_room_surface),
mean(PropertyPrices$living_room_surface, na.rm = TRUE),
PropertyPrices$living_room_surface)
PropertyPrices$primary_energy_consumption <- ifelse(is.na(PropertyPrices$primary_energy_consumption),
mean(PropertyPrices$primary_energy_consumption, na.rm = TRUE),
PropertyPrices$primary_energy_consumption)
PropertyPrices$street_frontage_width <- ifelse(is.na(PropertyPrices$street_frontage_width),
mean(PropertyPrices$street_frontage_width, na.rm = TRUE),
PropertyPrices$street_frontage_width)
PropertyPrices$toilets <- ifelse(is.na(PropertyPrices$toilets),
mean(PropertyPrices$toilets, na.rm = TRUE),
PropertyPrices$toilets)
PropertyPrices$bathrooms <- ifelse(is.na(PropertyPrices$bathrooms),
mean(PropertyPrices$bathrooms, na.rm = TRUE),
PropertyPrices$bathrooms)
PropertyPrices$co2_emission <- ifelse(is.na(PropertyPrices$co2_emission),
mean(PropertyPrices$co2_emission, na.rm = TRUE),
PropertyPrices$co2_emission)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$width_of_the_lot_on_the_street <- ifelse(is.na(PropertyPrices$width_of_the_lot_on_the_street),
mean(PropertyPrices$width_of_the_lot_on_the_street, na.rm = TRUE),
PropertyPrices$width_of_the_lot_on_the_street)
PropertyPrices$garden_surface <- ifelse(is.na(PropertyPrices$garden_surface),
mean(PropertyPrices$garden_surface, na.rm = TRUE),
PropertyPrices$garden_surface)
PropertyPrices$surface_of_the_plot <- ifelse(is.na(PropertyPrices$surface_of_the_plot),
mean(PropertyPrices$surface_of_the_plot, na.rm = TRUE),
PropertyPrices$surface_of_the_plot)
#en aquestes tres variables només omplirem el valor si la variable habitacions és més gran o igual que l'habitació que estem mirant
PropertyPrices$bedroom_1_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 1,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_2_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 2,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
PropertyPrices$bedroom_3_surface <- ifelse(is.na(PropertyPrices$bedroom_1_surface) & PropertyPrices$bedrooms >= 3,
mean(PropertyPrices$bedroom_1_surface, na.rm = TRUE),
PropertyPrices$bedroom_1_surface)
#aquestes dos últimes variables he considerat que era millor omplirles amb la mitjana i na la mitja
PropertyPrices$construction_year <- ifelse(is.na(PropertyPrices$construction_year),
median(PropertyPrices$construction_year, na.rm = TRUE),
PropertyPrices$construction_year)
PropertyPrices$number_of_frontages <- ifelse(is.na(PropertyPrices$number_of_frontages),
median(PropertyPrices$number_of_frontages, na.rm = TRUE),
PropertyPrices$number_of_frontages)
#comprobació que ja no queden valors nuls
colSums(is.na(PropertyPrices))
#aqui podem veure els valors que pren la variable Price que va dels 30.000 fins als 2M aproximadament
barplot(table(PropertyPrices$price), main = "Preus", xlab = "Preus", col = "skyblue")
PropertyPricesAux <- PropertyPrices
#com la variable que volem predir té molts valors possibles el que faré és discretitzarla i reduïr els seus valors a 12 possibles
intervals <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 500000000)
intervals2 <- c(50000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000)
PropertyPrices$price <- cut(PropertyPrices$price, breaks = intervals, labels = intervals2, include.lowest = TRUE)
PropertyPrices$price
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices$price), ]
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices$price
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices$price), ]
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices
PropertyPrices_without_na <- datos[complete.cases(PropertyPrices$price), ]
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
library(ggplot2)
library(cluster)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices
PropertyPrices_numeric <- PropertyPrices %>% select_if(is.numeric)
library(ggplot2)
library(cluster)
library(dplyr)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices
PropertyPrices_numeric <- PropertyPrices %>% select_if(is.numeric)
modelo_kmeans <- kmeans(PropertyPrices_without_na$price, centers = num_clusters)
library(ggplot2)
library(cluster)
library(dplyr)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices
PropertyPrices_numeric <- PropertyPrices %>% select_if(is.numeric)
modelo_kmeans <- kmeans(PropertyPrices_numeric$price, centers = num_clusters)
library(ggplot2)
library(cluster)
library(dplyr)
# Aplicar K-means con, por ejemplo, 3 clusters
num_clusters <- 11
PropertyPrices
PropertyPrices_numeric <- PropertyPrices %>% select_if(is.numeric)
modelo_kmeans <- kmeans(PropertyPrices_numeric$price, centers = num_clusters)
knitr::opts_chunk$set(echo = TRUE)
